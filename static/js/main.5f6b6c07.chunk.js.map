{"version":3,"sources":["Leaf_icon_15.svg","components/Brand/Brand.js","components/Navbar/Navbar.js","components/Intro/Intro.js","components/Image/Image.js","components/Board/Board.js","components/Footer/Footer.js","App.js","registerServiceWorker.js","index.js"],"names":["module","exports","Brand","props","href","className","src","logo","alt","Navbar","statusClass","status","score","highScore","timeBonus","counter","Intro","closeIntro","intro","document","querySelector","style","maxHeight","marginTop","padding","opacity","onClick","this","Component","Image","handleClick","id","process","source","name","Board","shake","images","map","image","key","Footer","goodResponse","badResponse","App","resetRound","setState","prevState","shuffleImages","clicked","resetGame","correctChoice","startCountdown","winGame","stopCountdown","setTimeout","correctGuess","Math","floor","random","length","incorrectGuess","i","clickedItems","state","includes","arr","a","sort","b","componentDidMount","componentWillUnmount","clearInterval","timerID","decrement","setInterval","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","getElementById","URL","origin","addEventListener","fetch","response","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.5f6b6c07.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Leaf_icon_15.859f4fc4.svg\";","import React from 'react';\r\nimport './Brand.css';\r\nimport logo from '../../Leaf_icon_15.svg';\r\n\r\nconst Brand = (props) => {\r\n\treturn(\r\n\t\t<a href=\"/Leaf-Hunter/\" className=\"brand-link\">\r\n\t\t\t<div className=\"App-logo-title\">\r\n\t\t\t\t<img src={logo} alt=\"logo\" className=\"App-logo\" />\r\n\t\t\t\t<h1 className=\"App-title\">Leaf Hunter</h1>\r\n\t\t\t</div>\r\n\t\t</a>\r\n\t);\r\n};\r\n\r\nexport default Brand;\r\n","import React from 'react';\r\nimport './Navbar.css';\r\nimport Brand from '../Brand';\r\n\r\nconst Navbar = (props) => {\r\n\treturn(\r\n\t\t<nav className=\"navbar App-header\">\r\n\t\t\t<div className=\"navbar-main\">\r\n\t\t\t\t<Brand />\r\n\t\t\t\t<h4 className={`status ${props.statusClass}`}>{props.status}</h4>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<div className=\"score\">\r\n\t\t\t\t\t\t<span className=\"score-round\">Score: {props.score}</span>\r\n\t\t\t\t\t\t<span className=\"score-divider\"> | </span>\r\n\t\t\t\t\t\t<span className=\"score-highest\">Highest Score: {props.highScore}</span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<span className={`countdown-a ${props.timeBonus}`}>Time Remaining: {props.counter}</span>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<div className={`countdown-b ${props.timeBonus}`}>Time Remaining: {props.counter}</div>\r\n\t\t</nav>\r\n\t);\r\n};\r\n\r\nexport default Navbar;\r\n","import React, {Component} from 'react';\r\nimport './Intro.css';\r\n\r\nclass Intro extends Component {\r\n\tcloseIntro = () => {\r\n\t\tconst intro = document.querySelector('.App-intro');\r\n\t\tintro.style.maxHeight = '0';\r\n\t\tintro.style.marginTop = '0';\r\n\t\tintro.style.padding = '38px';\r\n\t\tintro.style.opacity = '0';\r\n\t};\r\n\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<header className=\"App-intro d-none d-md-block\">\r\n\t\t\t\t<div className=\"App-intro-bg\"></div>\r\n\t\t\t\t<p>Click on a leaf to earn points, but don't click on any more than once!</p>\r\n\t\t\t\t<i className=\"fas fa-window-close close\" onClick={this.closeIntro}></i>\r\n\t\t\t</header>\r\n\t\t);\r\n\t};\r\n};\r\n\r\nexport default Intro;\r\n","import React from 'react';\r\nimport './Image.css';\r\n\r\nconst Image = props => {\r\n\treturn (\r\n\t\t<div className=\"card leaf\" onClick={() => props.handleClick(props.id)}>\r\n\t\t\t<img \r\n\t\t\t\tsrc={process.env.PUBLIC_URL + props.source} \r\n\t\t\t\talt={props.name}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Image;","import React from 'react';\r\nimport './Board.css';\r\nimport Image from '../Image';\r\n\r\nconst Board = (props) => {\r\n\treturn (\r\n\t\t<main className=\"container\">\r\n\t\t\t<div className={`wrapper row ${props.shake ? 'shake' : ''}`}>\r\n\t\t\t\t{props.images.map(image => (\r\n\t\t\t\t\t<Image\r\n\t\t\t\t\t\tkey={image.id}\r\n\t\t\t\t\t\tid={image.id}\r\n\t\t\t\t\t\tname={image.name}\r\n\t\t\t\t\t\tsource={image.src}\r\n\t\t\t\t\t\thandleClick={props.onClick}\r\n\t\t\t\t\t/>\r\n\t\t\t\t))}\r\n\t\t\t</div>\r\n\t\t</main>\r\n\t);\r\n};\r\n\r\nexport default Board;\r\n","import React from 'react';\r\nimport './Footer.css';\r\nimport Brand from '../Brand';\r\n\r\nconst Footer = (props) => {\r\n\treturn (\r\n\t\t<footer className=\"App-footer\">\r\n\t\t\t<Brand />\r\n\t\t\t<span className={`footer-countdown ${props.timeBonus}`}>Time Remaining: {props.counter}</span>\r\n\t\t\t<a href=\"http://www.jwhite.co\" className=\"footer-link\">Jonathan White &copy; 2018</a>\r\n\t\t</footer>\r\n\t);\r\n};\r\n\r\nexport default Footer;\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Navbar from './components/Navbar';\r\nimport Intro from './components/Intro';\r\nimport Board from './components/Board';\r\nimport Footer from './components/Footer';\r\nimport images from './images.json';\r\n\r\nconst goodResponse = [\r\n  \"You guessed correctly!\",\r\n  \"You're a natural!\",\r\n  \"Keep it up!\",\r\n  \"Your memory serves you well.\",\r\n  \"Good job!\"\r\n];\r\n\r\nconst badResponse = [\r\n  \"You guessed incorrectly!\",\r\n  \"So close, but that's not it!\",\r\n  \"Better luck next time.\",\r\n  \"You're running out of time...\",\r\n  \"Don't click the same leaf twice!\"\r\n];\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      images,\r\n      clicked: [],\r\n      score: 0,\r\n      highScore: 0,\r\n      correctChoice: null,\r\n      counter: 60,\r\n      shake: 0,\r\n      status: 'Click a leaf below',\r\n      statusClass: 'text-white',\r\n      timeBonus: ''\r\n    };\r\n  }\r\n\r\n  // reset the clicked array, score and shuffle images\r\n  resetRound = () => {\r\n    this.setState((prevState) => ({\r\n      images: this.shuffleImages(prevState.images),\r\n      clicked: [],\r\n      score: 0,\r\n    }));\r\n  };\r\n\r\n  // Reset the game if the clock runs out of time\r\n  resetGame = () => {\r\n    this.setState((prevState) => ({\r\n      images: this.shuffleImages(prevState.images),\r\n      clicked: [],\r\n      score: 0,\r\n      correctChoice: null,\r\n      counter: 60,\r\n      status: \"Click a leaf below\",\r\n      statusClass: 'text-white',\r\n      timeBonus: ''\r\n    }));\r\n\r\n    this.startCountdown();\r\n  };\r\n\r\n  winGame = () => {\r\n    // Display celebration once the game has been won!\r\n    this.setState({\r\n      status: 'You Win!!!',\r\n      statusClass: 'text-winner',\r\n      timeBonus: 'increase-score',\r\n    });\r\n    this.stopCountdown();\r\n\r\n    setTimeout(() => {\r\n      this.setState((prevState) => {\r\n        if((prevState.score * prevState.counter) >= prevState.highScore)\r\n          return ({\r\n              score: prevState.score * prevState.counter,\r\n              highScore: prevState.score * prevState.counter\r\n            })\r\n        else\r\n          return ({\r\n              score: prevState.score * prevState.counter\r\n            })\r\n      });\r\n    },3000);\r\n\r\n    // Delay the start of the next game\r\n    setTimeout(() => {\r\n      this.resetGame();\r\n    }, 5000);\r\n  };\r\n\r\n  correctGuess = () => {\r\n    this.setState({\r\n      correctChoice: true,\r\n      shake: 0,\r\n      status: goodResponse[Math.floor(Math.random() * goodResponse.length)],\r\n      statusClass: 'text-white'\r\n    });\r\n  };\r\n\r\n  incorrectGuess = () => {\r\n    this.setState({\r\n      correctChoice: false,\r\n      shake: 1,\r\n      status: badResponse[Math.floor(Math.random() * badResponse.length)],\r\n      statusClass: 'text-danger'\r\n    });\r\n    this.resetRound();\r\n  };\r\n\r\n  handleClick = i => {\r\n    const clickedItems = this.state.clicked;\r\n\r\n    // If the player has already clicked the image reset the game\r\n    if(clickedItems.includes(i)) {\r\n      this.incorrectGuess();\r\n      return;\r\n    } else {\r\n      this.correctGuess();\r\n\r\n      // If score is at 11 and player has guessed correctly\r\n      // the game has been won\r\n      if(this.state.score === 11){\r\n        this.winGame();\r\n      }\r\n\r\n      // Increment the score\r\n      if (this.state.score >= this.state.highScore) {\r\n        this.setState((prevState) => ({\r\n          score: prevState.score + 1,\r\n          highScore: prevState.highScore + 1\r\n        }));\r\n      } else {\r\n        this.setState((prevState) => ({\r\n          score: prevState.score + 1\r\n        }));\r\n      }\r\n    };\r\n\r\n    // record the index of the clicked image and reshuffle images\r\n    this.setState((prevState) => ({\r\n      clicked: [...clickedItems, i],\r\n      images: this.shuffleImages(prevState.images)\r\n    }));\r\n  };\r\n\r\n  // Shuffle image array\r\n  shuffleImages = (arr) => (\r\n    arr\r\n      .map(a => [Math.random(), a])\r\n      .sort((a, b) => a[0] - b[0])\r\n      .map(a => a[1])\r\n  );\r\n\r\n  componentDidMount = () => {\r\n    this.startCountdown();\r\n  }\r\n\r\n  componentWillUnmount = () => {\r\n    clearInterval(this.timerID);\r\n  }\r\n\r\n  // Decrement the counter state\r\n  decrement = () => {\r\n    this.setState((prevState) => ({\r\n      counter: (prevState.counter > 0) ? prevState.counter - 1 : 0,\r\n      shake: 0\r\n    }));\r\n\r\n    if(this.state.counter === 0) {\r\n      clearInterval(this.timerID);\r\n      this.setState({\r\n        shake: 1,\r\n        status: \"Time's up!\",\r\n        statusClass: 'text-white',\r\n      });\r\n\r\n      // Delay the start of the next game\r\n      setTimeout(() => {\r\n        this.resetGame();\r\n      }, 4000);\r\n\r\n      return;\r\n    }\r\n  }\r\n\r\n  // Start the countdown clock\r\n  startCountdown = () => {\r\n    clearInterval(this.timerID);\r\n    this.timerID = setInterval(\r\n      () => this.decrement(),\r\n      1000\r\n    );\r\n  }\r\n\r\n  // Stop the countdown clock\r\n  stopCountdown = () => {\r\n    clearInterval(this.timerID);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Navbar\r\n          status={this.state.status}\r\n          statusClass={this.state.statusClass}\r\n          score={this.state.score}\r\n          highScore={this.state.highScore}\r\n          counter={this.state.counter}\r\n          timeBonus={this.state.timeBonus}\r\n        />\r\n        <Intro />\r\n        <Board\r\n          images={this.state.images}\r\n          onClick={this.handleClick}\r\n          shake={this.state.shake}\r\n          score={this.state.score}\r\n          highScore={this.state.highScore}\r\n        />\r\n        <Footer\r\n          counter={this.state.counter}\r\n          timeBonus={this.state.timeBonus}\r\n        />\r\n        <div className=\"score\">\r\n  \t\t\t\t<div className=\"score-round\">Score: {this.state.score}</div>\r\n  \t\t\t\t<div className=\"score-highest\">High: {this.state.highScore}</div>\r\n  \t\t\t</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}